package org.recolnat.collection.manager.api.domain.enums.imports;

import lombok.Getter;

import java.util.Objects;

@Getter
public enum ImportSpecimenColumnEnum {
    COLLECTION_NAME("NOM_COLLECTION"),
    // specimen
    COLLECTION_CODE("CODE_COLLECTION"),
    CATALOG_NUMBER("NUMERO_INVENTAIRE"),
    NOMINATIVE_COLLECTION("COLLECTION_NOMINALE"),
    RECORD_NUMBER("NUMERO_SPECIMEN"),
    BASIS_OF_RECORD("NATURE_SPECIMEN"),
    PREPARATIONS("PREPARATION"),
    SEX("SEXE"),
    LIFE_STAGE("STADE_DEVELOPPEMENT"),
    INDIVIDUAL_COUNT("NOMBRE_INDIVIDUS"),
    OCCURRENCE_REMARKS("REMARQUES_SPECIMEN"),
    LEGAL_STATUS("STATUT_JURIDIQUE"),
    DONOR("DONATEUR"),
    // collection_event
    EVENT_DATE_START_DAY("COLLECTE_DEBUT_JOUR"),
    EVENT_DATE_START_MONTH("COLLECTE_DEBUT_MOIS"),
    EVENT_DATE_START_YEAR("COLLECTE_DEBUT_ANNEE"),
    EVENT_DATE_END_DAY("COLLECTE_FIN_JOUR"),
    EVENT_DATE_END_MONTH("COLLECTE_FIN_MOIS"),
    EVENT_DATE_END_YEAR("COLLECTE_FIN_ANNEE"),
    INTERPRETED_DATE("INTERPRETATION_DATE_COLLECTE"),
    RECORDED_BY("NOM_COLLECTEUR"),
    FIELD_NUMBER("NUMERO_COLLECTE"),
    FIELD_NOTES("NOTES_TERRAIN"),
    EVENT_REMARKS("REMARQUES_COLLECTE"),
    VERBATIM_LOCALITY("LOCALISATION_VERBATIM"),
    SENSITIVE_LOCATION("LOCALISATION_SENSIBLE"),
    DECIMAL_LATITUDE("LATITUDE"),
    DECIMAL_LONGITUDE("LONGITUDE"),
    GEODETIC_DATUM("SYSTEME_GEODESIQUE"),
    GEOREFERENCE_SOURCES("SOURCE_GEOREFERENCE"),
    MINIMUM_ELEVATION_IN_METERS("ALTITUDE_MIN"),
    MAXIMUM_ELEVATION_IN_METERS("ALTITUDE_MAX"),
    INTERPRETED_ALTITUDE("INTERPRETATION_ALTITUDE"),
    MINIMUM_DEPTH_IN_METERS("PROFONDEUR_MIN"),
    MAXIMUM_DEPTH_IN_METERS("PROFONDEUR_MAX"),
    INTERPRETED_DEPTH("INTERPRETATION_PROFONDEUR"),
    LOCALITY("LOCALITE"),
    MUNICIPALITY("COMMUNE"),
    COUNTY("DEPARTEMENT"),
    REGION("REGION"),
    STATE_PROVINCE("ETAT_PROVINCE"),
    COUNTRY("PAYS"),
    COUNTRY_CODE("CODE_ISO"),
    CONTINENT("CONTINENT"),
    ISLAND("ILES"),
    ISLAND_GROUP("GROUPE_ILES"),
    WATER_BODY("MASSE_EAU"),
    HABITAT("HABITAT"),
    LOCATION_REMARKS("REMARQUES_LOCALISATION"),
    // identification
    VERBATIM_IDENTIFICATION("VERBATIM_DETERMINATION"),
    IDENTIFICATION_VERIFICATION_STATUS("DOUTE_DETERMINATION"),
    IDENTIFICATION_REMARKS("REMARQUES_DETERMINATION"),
    TYPE_STATUS("TYPE"),
    IDENTIFIED_BYID("AUTEUR_DETERMINATION"),
    DATE_IDENTIFIED_YEAR("DETERMINATION_ANNEE"),
    DATE_IDENTIFIED_MONTH("DETERMINATION_MOIS"),
    DATE_IDENTIFIED_DAY("DETERMINATION_JOUR"),
    // taxon
    SCIENTIFIC_NAME("NOM_SCIENTIFIQUE"),
    SCIENTIFIC_NAME_AUTHORSHIP("AUTEURS_TAXON"),
    VERNACULAR_NAME("NOM_VERNACULAIRE"),
    FAMILY("FAMILLE"),
    SUB_FAMILY("SOUS_FAMILLE"),
    GENUS("GENRE"),
    SUB_GENUS("SOUS_GENRE"),
    SPECIFIC_EPITHET("EPITHETE_SPECIFIQUE"),
    INFRASPECIFIC_EPITHET("EPITHETE_INFRA_SPECIFIQUE"),
    KINGDOM("REGNE"),
    PHYLUM("EMBRANCHEMENT"),
    TAXON_ORDER("ORDRE"),
    TAXON_CLASS("CLASSE"),
    SUB_ORDER("SOUS_ORDRE"),
    TAXON_REMARKS("REMARQUES_TAXON"),
    // geological_context
    VERBATIM_EPOCH("VERBATIM_DATATION"),
    AGE_ABSOLUTE("DATATION_ABSOLUE"),
    EARLIEST_AGE_OR_LOWEST_STAGE("ETAT_AGE_PLUS_ANCIEN"),
    LATEST_AGE_OR_HIGHEST_STAGE("ETAT_AGE_PLUS_RECENT"),
    EARLIEST_EPOCH_OR_LOWEST_SERIES("SERIE_EPOQUE_PLUS_ANCIEN"),
    LATEST_EPOCH_OR_HIGHEST_SERIES("SERIE_EPOQUE_PLUS_RECENT"),
    EARLIEST_PERIOD_OR_LOWEST_SYSTEM("SYSTEME_PERIODE_PLUS_ANCIEN"),
    LATEST_PERIOD_OR_HIGHEST_SYSTEM("SYSTEME_PERIODE_PLUS_RECENT"),
    EARLIEST_ERA_OR_LOWEST_ERATHEM("ERATHEME_ERE_PLUS_ANCIEN"),
    LATEST_ERA_OR_HIGHEST_ERATHEM("ERATHEME_ERE_PLUS_RECENT"),
    EARLIEST_EON_OR_LOWEST_EONOTHEM("EONOTHEME_EON_PLUS_ANCIEN"),
    LATEST_EON_OR_HIGHEST_EONOTHEM("EONOTHEME_EON_PLUS_RECENT"),
    LOWEST_BIOSTRATIGRAPHIC_ZONE("ZONE_BIOSTRATIGRAPHIQUE_MIN"),
    HIGHEST_BIOSTRATIGRAPHIC_ZONE("ZONE_BIOSTRATIGRAPHIQUE_MAX"),
    GEO_GROUP("LITHOSTRATIGRAPHIE_GROUPE"),
    FORMATION("LITHOSTRATIGRAPHIE_FORMATION"),
    MEMBER("LITHOSTRATIGRAPHIE_MEMBRE"),
    BED("LITHOSTRATIGRAPHIE_BANC"),
    OTHER_LITHOSTRATIGRAPHIC_TERMS("AUTRES_TERMES_LITHOSTRATIGRAPHIQUES");


    private final String columnName;

    ImportSpecimenColumnEnum(String columnName) {
        this.columnName = columnName;
    }


    public static ImportSpecimenColumnEnum fromValue(String value) {
        for (ImportSpecimenColumnEnum b : values()) {
            if (Objects.equals(b.getColumnName(), value)) {
                return b;
            }
        }
        return null;
    }

}
