input {
  jdbc {
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://postgres_collection:5432/itv"
    jdbc_user => "itv"
    jdbc_password => "itv"
    parameters => { "status" => "VALID" }
    schedule => "3 * * * *"
    statement => "select specimenjp0_.id as id,specimenjp0_.catalog_number as catalog_number, collection1_.id as collection_id,     
 		collection1_.collection_name_fr as collection_name_fr,collection1_.collection_name_en as collection_name_en,collection1_.fk_institution_id as institution_id,
 		institution1_.name as  institution_name,identifica_.identified_byid as identification_by_ids,
 		string_agg(taxon_.family,',') as family,string_agg(taxon_.specific_epithet,',') as specific_epithet,
 		string_agg(taxon_.genus,',') as genus,string_agg(taxon_.scientific_name,',') as scientific_names,
 		string_agg(taxon_.vernacular_name,',') as vernacular_names, collection_event1_.recorded_by as recorded_by,
 		INITCAP (collection_event1_.continent) as continent,collection_event1_.county as county,INITCAP (collection_event1_.country) as country,
 		collection_event1_.water_body as water_body, INITCAP (collection_event1_.island) as island,
 		collection_event1_.decimal_latitude as decimal_latitude,collection_event1_.decimal_longitude as decimal_longitude,
 		collection_event1_.municipality  as municipality
 		 from specimen specimenjp0_ 
    	inner join collection collection1_  on specimenjp0_.fk_id_collection=collection1_.id 
        left outer join institution institution1_  on collection1_.fk_institution_id =institution1_.institution_id 
        left outer join collection_event  collection_event1_ on specimenjp0_.fk_colevent_id =collection_event1_.id 
        left outer join identification identifica_ on specimenjp0_.id=identifica_.fk_id_specimen 
        left outer join taxon taxon_  on identifica_.id=taxon_.fk_id_identification 
        where specimenjp0_.state='VALID'    
        -- and identifica_.current_determination = true and taxon_.level_type ='MASTER';
        group by specimenjp0_.id,specimenjp0_.catalog_number,collection1_.id, collection1_.collection_name_fr,
        collection1_.fk_institution_id,institution1_.name,identifica_.identified_byid,taxon_.vernacular_name,taxon_.family,taxon_.specific_epithet,
        collection_event1_.recorded_by,collection_event1_.continent,collection_event1_.county,collection_event1_.country,
        collection_event1_.water_body,collection_event1_.island,collection_event1_.decimal_latitude,collection_event1_.decimal_longitude,collection_event1_.municipality LIMIT 100000"
  }
}


filter {
  
}

 # for debug replace by   stdout { codec => rubydebug }
output {
  elasticsearch {
     hosts => "${ELASTIC_HOSTS}"
     index => "${FILE_INDEX_NAME}"
     document_id => "%{id}"
   }
  stdout { codec => rubydebug{
      metadata => true
    }
  }
}